#!/usr/bin/env node

const mongoose = require('mongoose');
const http = require('http');
const debug = require('debug')('server');
const app = require('../app');
const { db } = require('../configs');
let { port } = require('../configs');

// Connect to our Database and handle any bad connections
mongoose.connect(
  db.host,
  {
    useNewUrlParser: true,
    useCreateIndex: true,
  }
);
mongoose.Promise = global.Promise; // Tell Mongoose to use ES6 promises
mongoose.connection.on('error', err => {
  console.error(`ğŸ™… ğŸš« ğŸ™… ğŸš« ğŸ™… ğŸš« ğŸ™… ğŸš« â†’ ${err.message}`);
});

// Normalize a port into a number, string, or false
function normalizePort(val) {
  const normalizedPort = parseInt(val, 10);

  if (Number.isNaN(normalizedPort)) {
    // named pipe
    return val;
  }

  if (normalizedPort >= 0) {
    // normalizedPort number
    return normalizedPort;
  }

  return false;
}

// Get port from environment and store in Express
port = normalizePort(port);

// import all of our models
require('../models/Hero');
require('../models/Score');

// Start our app!

// Express configuration.
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);

// Listen on server
server.listen(port);

// Event listener for HTTP server "listening" event
server.on('listening', () => {
  const address = server.address();
  const bind = typeof address === 'string' ? `pipe ${address}` : `port ${address.port}`;
  debug(`Listening on ${bind}`);
});
